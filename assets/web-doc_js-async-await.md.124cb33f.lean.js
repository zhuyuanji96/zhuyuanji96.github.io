import{_ as t,c as s,o as c,e,j as a}from"./app.33ae73b1.js";const j=JSON.parse('{"title":"JS异步解决方案","description":"","frontmatter":{},"headers":[],"relativePath":"web-doc/js-async-await.md"}'),o={name:"web-doc/js-async-await.md"},n=e("h1",{id:"js异步解决方案",tabindex:"-1"},[a("JS异步解决方案 "),e("a",{class:"header-anchor",href:"#js异步解决方案","aria-hidden":"true"},"#")],-1),r=e("p",null,[a("在刚JS设计之初异步的解决方案是通过callback的方式去解决问题，但随着业务代码的复杂程度加剧，往往会出现大量的 callback ，这样就会使代码可读性大大下降，编码的时候也特别不方便。 为了解决这种回调地狱的问题，"),e("code",null,"JS"),a(" 先后推出 "),e("code",null,"Promise"),a(),e("code",null,"generator"),a(" 和 "),e("code",null,"async/await"),a(" 几种异步编程方案。")],-1),d=[n,r];function l(i,_,p,h,u,m){return c(),s("div",null,d)}const w=t(o,[["render",l]]);export{j as __pageData,w as default};
