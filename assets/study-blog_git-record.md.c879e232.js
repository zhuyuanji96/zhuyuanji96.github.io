import{_ as s,o as a,c as e,a as n}from"./app.08297905.js";const g=JSON.parse('{"title":"Git 常用设置记录","description":"","frontmatter":{},"headers":[{"level":2,"title":"在一台电脑上设置多个 GitHub 账户的 SSH","slug":"在一台电脑上设置多个-github-账户的-ssh","link":"#在一台电脑上设置多个-github-账户的-ssh","children":[{"level":3,"title":"1.生成新的 SSH 密钥对：","slug":"_1-生成新的-ssh-密钥对","link":"#_1-生成新的-ssh-密钥对","children":[]},{"level":3,"title":"2.添加新的 SSH 密钥到 GitHub 账户：","slug":"_2-添加新的-ssh-密钥到-github-账户","link":"#_2-添加新的-ssh-密钥到-github-账户","children":[]},{"level":3,"title":"3.配置 SSH 访问配置文件：","slug":"_3-配置-ssh-访问配置文件","link":"#_3-配置-ssh-访问配置文件","children":[]},{"level":3,"title":"4.测试连接： 使用 SSH 连接来测试是否可以成功连接到 GitHub。","slug":"_4-测试连接-使用-ssh-连接来测试是否可以成功连接到-github。","link":"#_4-测试连接-使用-ssh-连接来测试是否可以成功连接到-github。","children":[]}]},{"level":2,"title":"git 合并其他仓库的分支","slug":"git-合并其他仓库的分支","link":"#git-合并其他仓库的分支","children":[{"level":3,"title":"将主仓库的地址添加到自己本地的远程仓库中","slug":"将主仓库的地址添加到自己本地的远程仓库中","link":"#将主仓库的地址添加到自己本地的远程仓库中","children":[]},{"level":3,"title":"抓取仓库数据到本仓库中","slug":"抓取仓库数据到本仓库中","link":"#抓取仓库数据到本仓库中","children":[]},{"level":3,"title":"创建一个新的分支 bMaster","slug":"创建一个新的分支-bmaster","link":"#创建一个新的分支-bmaster","children":[]},{"level":3,"title":"切回 B 项目 master 分支","slug":"切回-b-项目-master-分支","link":"#切回-b-项目-master-分支","children":[]},{"level":3,"title":"合并两个分支（也就是将两个仓库的代码 merge）","slug":"合并两个分支-也就是将两个仓库的代码-merge","link":"#合并两个分支-也就是将两个仓库的代码-merge","children":[]},{"level":3,"title":"可能会合并失败并提示 fatal: refusing to merge unrelated histories","slug":"可能会合并失败并提示-fatal-refusing-to-merge-unrelated-histories","link":"#可能会合并失败并提示-fatal-refusing-to-merge-unrelated-histories","children":[]},{"level":3,"title":"将主仓库的地址添加到自己本地的远程仓库中","slug":"将主仓库的地址添加到自己本地的远程仓库中-1","link":"#将主仓库的地址添加到自己本地的远程仓库中-1","children":[]},{"level":3,"title":"抓取仓库数据到本仓库中","slug":"抓取仓库数据到本仓库中-1","link":"#抓取仓库数据到本仓库中-1","children":[]},{"level":3,"title":"创建一个新的分支 bMaster","slug":"创建一个新的分支-bmaster-1","link":"#创建一个新的分支-bmaster-1","children":[]},{"level":3,"title":"切回 B 项目 master 分支","slug":"切回-b-项目-master-分支-1","link":"#切回-b-项目-master-分支-1","children":[]},{"level":3,"title":"合并两个分支（也就是将两个仓库的代码 merge）","slug":"合并两个分支-也就是将两个仓库的代码-merge-1","link":"#合并两个分支-也就是将两个仓库的代码-merge-1","children":[]},{"level":3,"title":"可能会合并失败并提示 fatal: refusing to merge unrelated histories","slug":"可能会合并失败并提示-fatal-refusing-to-merge-unrelated-histories-1","link":"#可能会合并失败并提示-fatal-refusing-to-merge-unrelated-histories-1","children":[]}]}],"relativePath":"study-blog/git-record.md"}'),l={name:"study-blog/git-record.md"},o=n(`<h1 id="git-常用设置记录" tabindex="-1">Git 常用设置记录 <a class="header-anchor" href="#git-常用设置记录" aria-hidden="true">#</a></h1><h2 id="在一台电脑上设置多个-github-账户的-ssh" tabindex="-1">在一台电脑上设置多个 <code>GitHub</code> 账户的 <code>SSH</code> <a class="header-anchor" href="#在一台电脑上设置多个-github-账户的-ssh" aria-hidden="true">#</a></h2><h3 id="_1-生成新的-ssh-密钥对" tabindex="-1">1.生成新的 <code>SSH</code> 密钥对： <a class="header-anchor" href="#_1-生成新的-ssh-密钥对" aria-hidden="true">#</a></h3><p>打开终端或命令提示符窗口，并运行以下命令来生成一个新的 <code>SSH</code> 密钥对。在生成新的密钥对时，你可以为其指定一个唯一的名称，以区分不同的账户。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">ssh-keygen</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-t</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rsa</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-C</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">your_email@example.com</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-f</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">~/.ssh/id_rsa_second</span></span>
<span class="line"></span></code></pre></div><p>在上面的命令中，<code>-C</code> 参数用于指定你的邮箱地址，<code>-f</code> 参数用于指定密钥文件的名称和路径。你可以将 <code>id_rsa_second</code> 替换为你想要的名称。</p><h3 id="_2-添加新的-ssh-密钥到-github-账户" tabindex="-1">2.添加新的 <code>SSH</code> 密钥到 <code>GitHub</code> 账户： <a class="header-anchor" href="#_2-添加新的-ssh-密钥到-github-账户" aria-hidden="true">#</a></h3><p>打开生成的公钥文件（默认为 <code>id_rsa_second.pub</code>,取决于你设置的密钥名称），将其中的内容复制到剪贴板。</p><p>访问 <code>GitHub</code> 网站，登录到你的账户。点击你的账户头像，然后选择 <code>Settings</code>（设置）。在页面左侧的菜单中选择 <code>SSH and GPG keys</code>（SSH 和 GPG 密钥），然后点击 <code>New SSH key</code>（新的 SSH 密钥）。在 <code>Title</code>（标题）字段中，可以为该密钥添加一个描述性的名称，然后将剪贴板中的公钥内容粘贴到 <code>Key</code>（密钥）字段中。最后，点击 <code>Add SSH key</code>（添加 SSH 密钥）来保存。</p><h3 id="_3-配置-ssh-访问配置文件" tabindex="-1">3.配置 <code>SSH</code> 访问配置文件： <a class="header-anchor" href="#_3-配置-ssh-访问配置文件" aria-hidden="true">#</a></h3><p>打开终端或命令提示符窗口，并编辑 <code>SSH</code> 配置文件 <code>~/.ssh/config</code>。如果文件不存在，则可以创建一个新的。</p><p>在配置文件中，添加以下内容（假设你使用的是默认的 <code>SSH</code> 密钥 <code>id_rsa</code> 和生成的新密钥 <code>id_rsa_second</code>）：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 默认账户</span></span>
<span class="line"><span style="color:#FFCB6B;">Host</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">github.com</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">User</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">IdentityFile</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">~/.ssh/id_rsa</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 第二个账户</span></span>
<span class="line"><span style="color:#FFCB6B;">Host</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">github-second</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">HostName</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">github.com</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">User</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">IdentityFile</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">~/.ssh/id_rsa_second</span></span>
<span class="line"></span></code></pre></div><p>在上面的配置中，我们创建了两个 <code>Host</code>，一个是默认的 <code>github.com</code>，另一个是新账户的 <code>github-second</code>。分别指定了不同的密钥文件路径。</p><p>我的配置参考</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 配置github.com</span></span>
<span class="line"><span style="color:#FFCB6B;">Host</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">github.com</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">HostName</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">github.com</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">IdentityFile</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">~/.ssh/YJ/id_rsa</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">PreferredAuthentications</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">publickey</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">User</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">YJ丶</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 配置  gitlab.dian***.net</span></span>
<span class="line"><span style="color:#FFCB6B;">Host</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gitlab.dian</span><span style="color:#A6ACCD;">***</span><span style="color:#C3E88D;">.net</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">HostName</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gitlab.dian</span><span style="color:#A6ACCD;">***</span><span style="color:#C3E88D;">.net</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">IdentityFile</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">~/.ssh/diancun/id_rsa</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">PreferredAuthentications</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">publickey</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">User</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">zhuyuanji</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 配置粉象 https://gitlab.****.com/</span></span>
<span class="line"><span style="color:#FFCB6B;">Host</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gitlab.</span><span style="color:#A6ACCD;">*</span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">**</span><span style="color:#C3E88D;">.com</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">HostName</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gitlab.</span><span style="color:#A6ACCD;">*</span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">**</span><span style="color:#C3E88D;">.com</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">IdentityFile</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">~/.ssh/id_rsa</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">PreferredAuthentications</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">publickey</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">User</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">zhuyuanji</span></span>
<span class="line"></span></code></pre></div><h3 id="_4-测试连接-使用-ssh-连接来测试是否可以成功连接到-github。" tabindex="-1">4.测试连接： 使用 <code>SSH</code> 连接来测试是否可以成功连接到 <code>GitHub</code>。 <a class="header-anchor" href="#_4-测试连接-使用-ssh-连接来测试是否可以成功连接到-github。" aria-hidden="true">#</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">ssh</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-T</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git@github.com</span></span>
<span class="line"><span style="color:#FFCB6B;">ssh</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-T</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git@github-second</span></span>
<span class="line"></span></code></pre></div><p>上述命令中，<code>-T</code> 参数用于启用交互式模式。分别替换 <code>github-second</code> 为你在 <code>SSH</code> 配置文件中设置的 <code>Host</code> 名称。如果连接成功，你将收到一条认证成功的消息。</p><p>现在，你可以使用不同的用户名和配置的 <code>SSH</code> 密钥来访问不同的 <code>GitHub</code> 账户。在使用 <code>Git</code> 命令时，通过指定 <code>github-second Host</code> 来将操作针对第二个账户进行。例如：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git@github-second:username/repo.git</span></span>
<span class="line"></span></code></pre></div><p>请确保在执行 <code>Git</code> 操作时，选择正确的 <code>Host</code> 和对应的账户来进行操作。</p><h2 id="git-合并其他仓库的分支" tabindex="-1"><code>git</code> 合并其他仓库的分支 <a class="header-anchor" href="#git-合并其他仓库的分支" aria-hidden="true">#</a></h2><p>最近有个需求就是把 <code>A</code> 项目的功能复制一份到 <code>B</code> 项目以作为 <code>A</code> 项目备胎，因为 2 个项目的代码基本一致，只有部分配置项不一致。然后去选择性复制文件，慢慢比较又觉得很烦，所以就研究了下把仓库<code>A</code> 的 <code>master</code> 分支，需要合到仓库 <code>B</code> 的 <code>master</code> 分支。废话不多说，直接上代码！</p><ul><li>主仓库：A：master</li><li>备份仓库：B：master</li></ul><p>默认在 <code>B</code> 仓库的 <code>master</code> 分支上</p><h3 id="将主仓库的地址添加到自己本地的远程仓库中" tabindex="-1">将主仓库的地址添加到自己本地的远程仓库中 <a class="header-anchor" href="#将主仓库的地址添加到自己本地的远程仓库中" aria-hidden="true">#</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;"># git remote add 仓库名称 地址</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">remote</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bOrigin</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git@github.xxx.com:B/code.git</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre></div><p>现在 <code>git remote</code> 一下可以看见本地有两个远程仓库：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">remote</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># bOrigin</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># origin</span></span>
<span class="line"></span></code></pre></div><h3 id="抓取仓库数据到本仓库中" tabindex="-1">抓取仓库数据到本仓库中 <a class="header-anchor" href="#抓取仓库数据到本仓库中" aria-hidden="true">#</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;"># git fetch 仓库名称</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">fetch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bOrigin</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre></div><h3 id="创建一个新的分支-bmaster" tabindex="-1">创建一个新的分支 <code>bMaster</code> <a class="header-anchor" href="#创建一个新的分支-bmaster" aria-hidden="true">#</a></h3><p>这是将远程主仓库的代码在本地新建一个分支，稍后会将这个分支的代码和本地代码 <code>merge</code>，这样也就是将主仓库代码和自己仓库的代码 <code>merge</code>了</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;"># git checkout -b 新分支名称 远程仓库名称/远程分支名称</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">checkout</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-b</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bMaster</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bOrigin/master</span></span>
<span class="line"></span></code></pre></div><h3 id="切回-b-项目-master-分支" tabindex="-1">切回 <code>B</code> 项目 <code>master</code> 分支 <a class="header-anchor" href="#切回-b-项目-master-分支" aria-hidden="true">#</a></h3><p>现在本地有两个分支：一个是之前的 <code>master</code>，这个分支的代码就是自己仓库的代码。一个新增的分支 <code>bMaster</code> 这个是主仓库的代码</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">checkout</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">master</span></span>
<span class="line"></span></code></pre></div><h3 id="合并两个分支-也就是将两个仓库的代码-merge" tabindex="-1">合并两个分支（也就是将两个仓库的代码 <code>merge</code>） <a class="header-anchor" href="#合并两个分支-也就是将两个仓库的代码-merge" aria-hidden="true">#</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;"># git merge 分支名称</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">merge</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bMaster</span></span>
<span class="line"></span></code></pre></div><h3 id="可能会合并失败并提示-fatal-refusing-to-merge-unrelated-histories" tabindex="-1">可能会合并失败并提示 <code>fatal: refusing to merge unrelated histories</code> <a class="header-anchor" href="#可能会合并失败并提示-fatal-refusing-to-merge-unrelated-histories" aria-hidden="true">#</a></h3><p>解决方案： 在你操作命令后面加 <code>--allow-unrelated-histories</code></p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">merge</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">master</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--allow-unrelated-histories</span></span>
<span class="line"></span></code></pre></div><p>最近有个需求就是把 <code>A</code> 项目的功能复制一份到 <code>B</code> 项目以作为 <code>A</code> 项目备胎，因为 2 个项目的代码基本一致，只有部分配置项不一致。然后去选择性复制文件，慢慢比较又觉得很烦，所以就研究了下把仓库<code>A</code> 的 <code>master</code> 分支，需要合到仓库 <code>B</code> 的 <code>master</code> 分支。废话不多说，直接上代码！</p><ul><li>主仓库：A：master</li><li>备份仓库：B：master</li></ul><p>默认在 <code>B</code> 仓库的 <code>master</code> 分支上</p><h3 id="将主仓库的地址添加到自己本地的远程仓库中-1" tabindex="-1">将主仓库的地址添加到自己本地的远程仓库中 <a class="header-anchor" href="#将主仓库的地址添加到自己本地的远程仓库中-1" aria-hidden="true">#</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;"># git remote add 仓库名称 地址</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">remote</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bOrigin</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git@github.xxx.com:B/code.git</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre></div><p>现在 <code>git remote</code> 一下可以看见本地有两个远程仓库：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">remote</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># bOrigin</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># origin</span></span>
<span class="line"></span></code></pre></div><h3 id="抓取仓库数据到本仓库中-1" tabindex="-1">抓取仓库数据到本仓库中 <a class="header-anchor" href="#抓取仓库数据到本仓库中-1" aria-hidden="true">#</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;"># git fetch 仓库名称</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">fetch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bOrigin</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre></div><h3 id="创建一个新的分支-bmaster-1" tabindex="-1">创建一个新的分支 <code>bMaster</code> <a class="header-anchor" href="#创建一个新的分支-bmaster-1" aria-hidden="true">#</a></h3><p>这是将远程主仓库的代码在本地新建一个分支，稍后会将这个分支的代码和本地代码 <code>merge</code>，这样也就是将主仓库代码和自己仓库的代码 <code>merge</code>了</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;"># git checkout -b 新分支名称 远程仓库名称/远程分支名称</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">checkout</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-b</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bMaster</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bOrigin/master</span></span>
<span class="line"></span></code></pre></div><h3 id="切回-b-项目-master-分支-1" tabindex="-1">切回 <code>B</code> 项目 <code>master</code> 分支 <a class="header-anchor" href="#切回-b-项目-master-分支-1" aria-hidden="true">#</a></h3><p>现在本地有两个分支：一个是之前的 <code>master</code>，这个分支的代码就是自己仓库的代码。一个新增的分支 <code>bMaster</code> 这个是主仓库的代码</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">checkout</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">master</span></span>
<span class="line"></span></code></pre></div><h3 id="合并两个分支-也就是将两个仓库的代码-merge-1" tabindex="-1">合并两个分支（也就是将两个仓库的代码 <code>merge</code>） <a class="header-anchor" href="#合并两个分支-也就是将两个仓库的代码-merge-1" aria-hidden="true">#</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;"># git merge 分支名称</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">merge</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bMaster</span></span>
<span class="line"></span></code></pre></div><h3 id="可能会合并失败并提示-fatal-refusing-to-merge-unrelated-histories-1" tabindex="-1">可能会合并失败并提示 <code>fatal: refusing to merge unrelated histories</code> <a class="header-anchor" href="#可能会合并失败并提示-fatal-refusing-to-merge-unrelated-histories-1" aria-hidden="true">#</a></h3><p>解决方案： 在你操作命令后面加 <code>--allow-unrelated-histories</code></p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">merge</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">master</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--allow-unrelated-histories</span></span>
<span class="line"></span></code></pre></div>`,63),t=[o];function p(c,i,r,d,C,h){return a(),e("div",null,t)}const A=s(l,[["render",p]]);export{g as __pageData,A as default};
