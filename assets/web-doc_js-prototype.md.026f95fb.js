import{_ as s,o,c as n,a}from"./app.08297905.js";const p="/assets/js-prototype1.e05bc59a.png",e="/assets/js-prototype2.661bd547.png",l="/assets/js-prototype3.91bd95ca.png",c="/assets/js-prototype4.fbd73cec.png",t="/assets/js-prototype5.e7237c24.png",b=JSON.parse('{"title":"JavaScript原型、原型链","description":"","frontmatter":{},"headers":[{"level":2,"title":"什么是原型？","slug":"什么是原型","link":"#什么是原型","children":[]},{"level":2,"title":"JavaScript 的原型","slug":"javascript-的原型","link":"#javascript-的原型","children":[]},{"level":2,"title":"什么是构造函数","slug":"什么是构造函数","link":"#什么是构造函数","children":[]},{"level":2,"title":"prototype","slug":"prototype","link":"#prototype","children":[]},{"level":2,"title":"proto","slug":"proto","link":"#proto","children":[]},{"level":2,"title":"constructor","slug":"constructor","link":"#constructor","children":[]},{"level":2,"title":"JavaScript原型链","slug":"javascript原型链","link":"#javascript原型链","children":[]},{"level":2,"title":"Function和Object的关系","slug":"function和object的关系","link":"#function和object的关系","children":[]}],"relativePath":"web-doc/js-prototype.md"}'),r={name:"web-doc/js-prototype.md"},y=a(`<h1 id="javascript原型、原型链" tabindex="-1"><code>JavaScript</code>原型、原型链 <a class="header-anchor" href="#javascript原型、原型链" aria-hidden="true">#</a></h1><p>早期的 <code>JavaScript</code> 程序员一般都有过使用 <code>JavaScript</code> “模拟面向对象”的经历。 然而 <code>JavaScript</code> 本身就是面向对象的，它并不需要模拟，只是它实现面向对象的方式和主流的流派不太一样，所以才让很多人产生了误会。 那么，随着我们理解的思路继续深入，这些“模拟面向对象”，实际上做的事情就是“模拟基于类的面向对象”。但是 <code>JavaScript</code> 这样的半吊子模拟，缺少了继承等关键特性，导致大家试图对它进行修补，进而产生了种种互不相容的解决方案。</p><p>庆幸的是，从 <code>ES6</code> 开始，<code>JavaScript</code> 提供了 <code>class</code> 关键字来定义类，尽管，这样的方案仍然是基于原型运行时系统的模拟，但是它修正了之前的一些常见的“坑”， 统一了社区的方案，这对语言的发展有着非常大的好处。 实际上，我认为“基于类”并非面向对象的唯一形态，如果我们把视线从“类”移开，<code>Brendan</code> 当年选择的原型系统，就是一个非常优秀的抽象对象的形式。 我们从头讲起。</p><h2 id="什么是原型" tabindex="-1">什么是原型？ <a class="header-anchor" href="#什么是原型" aria-hidden="true">#</a></h2><p>原型是顺应人类自然思维的产物。中文中有个成语叫做“照猫画虎”，这里的猫看起来就是虎的原型，所以，由此我们可以看出，用原型来描述对象的方法可以说是古已有之。</p><p>在不同的编程语言中，设计者也利用各种不同的语言特性来抽象描述对象。 最为成功的流派是使用“类”的方式来描述对象，这诞生了诸如 <code>C++</code>、<code>Java</code> 等流行的编程语言。这个流派叫做基于类的编程语言。 还有一种就是基于原型的编程语言，它们利用原型来描述对象。我们的 <code>JavaScript</code> 就是其中代表。</p><p>“基于类”的编程提倡使用一个关注分类和类之间关系开发模型。在这类语言中，总是先有类，再从类去实例化一个对象。类与类之间又可能会形成继承、组合等关系。类又往往与语言的类型系统整合，形成一定编译时的能力。 与此相对，“基于原型”的编程看起来更为提倡程序员去关注一系列对象实例的行为，而后才去关心如何将这些对象，划分到最近的使用方式相似的原型对象，而不是将它们分成类。 基于原型的面向对象系统通过“复制”的方式来创建新对象。一些语言的实现中，还允许复制一个空对象。这实际上就是创建一个全新的对象。</p><p>基于原型和基于类都能够满足基本的复用和抽象需求，但是适用的场景不太相同。 这就像专业人士可能喜欢在看到老虎的时候，喜欢用猫科豹属豹亚种来描述它，但是对一些不那么正式的场合，“大猫”可能更为接近直观的感受一些（插播一个冷 知识：比起老虎来，美洲狮在历史上相当长时间都被划分为猫科猫属，所以性格也跟猫更相似，比较亲人）。 我们的 <code>JavaScript</code> 并非第一个使用原型的语言，在它之前，<code>self</code>、<code>kevo</code> 等语言已经开始使用原型来描述对象了。 事实上，<code>Brendan</code> 更是曾透露过，他最初的构想是一个拥有基于原型的面向对象能力的 scheme 语言（但是函数式的部分是另外的故事，这篇文章里，我暂时不做 详细讲述）。 在 <code>JavaScript</code> 之前，原型系统就更多与高动态性语言配合，并且多数基于原型的语言提倡运行时的原型修改，我想，这应该是 <code>Brendan</code> 选择原型系统很重要的理由。</p><p>原型系统的“复制操作”有两种实现思路： 一个是并不真的去复制一个原型对象，而是使得新对象持有一个原型的引用； 另一个是切实地复制对象，从此两个对象再无关联。 历史上的基于原型语言因此产生了两个流派，显然，<code>JavaScript</code> 显然选择了前一种方式</p><h2 id="javascript-的原型" tabindex="-1"><code>JavaScript</code> 的原型 <a class="header-anchor" href="#javascript-的原型" aria-hidden="true">#</a></h2><p>任何对象都有一个原型对象，任何对象都是由一个构造函数创建的。<code>JavaScript</code>的对象中都包含了一个 <code>”[[Prototype]]”</code> 内部属性，这个属性所对应的就是该对象的原型。</p><p><code>“[[Prototype]]”</code> 作为对象的内部属性，是不能被直接访问的。所以为了方便查看一个对象的原型，<code>Firefox</code> 和 <code>Chrome</code> 中提供了 <code>__proto__</code> 这个非标准（不是所有浏览器都支持）的访问器。在 <code>JavaScript</code> 的原型对象中，还包含一个 <code>”constructor”</code> 属性，这个属性对应创建所有指向该原型的实例的构造函数。</p><p>在 <code>JavaScript</code> 中，每个函数都有一个 <code>prototype</code> 属性，当一个函数被用作构造函数来创建实例时，这个函数的 <code>prototype</code> 属性值会被作为原型赋值给所有对象实例（也就是设置 实例的 <code>__proto__</code> 属性），也就是说，所有实例的原型引用的是函数的 <code>prototype</code> 属性(<strong><strong><code>只有函数对象才会有这个属性!</code></strong></strong>)。也就是这样通过原型实现了对象的属性继承。下面我们来看代码：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> person </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Kevin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name) </span><span style="color:#676E95;font-style:italic;">// Kevin</span></span>
<span class="line"></span></code></pre></div><p><code>Person</code> 就是一个构造函数，我们使用 <code>new</code> 创建了一个实例对象 <code>person</code></p><h2 id="什么是构造函数" tabindex="-1">什么是构造函数 <a class="header-anchor" href="#什么是构造函数" aria-hidden="true">#</a></h2><p>当一个函数创建好以后，我们并不知道它是不是构造函数。只有当一个函数以 new 关键字来调用的时候，我们才能说它是一个构造函数。</p><p>在 <code>JavaScript</code> 中，用 <code>new</code> 关键字来调用的函数，称为构造函数。构造函数首字母一般大写构造函数的执行过程( <code>new</code> 关键字调用的情况)</p><ul><li>(1) 当以 new 关键字调用时，会创建一个新的内存空间，标记为构造函数 <code>Person</code> 的实例(原型地址指向构造函数的原型对象)。</li><li>(2) 函数体内部的 <code>this</code> 指向该内存</li></ul><p>通过以上两步，我们就可以得出这样的结论。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> p1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">person1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 创建一个新的内存 #f2</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> p2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">person2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 创建一个新的内存 #f3</span></span>
<span class="line"></span></code></pre></div><p>每当创建一个实例的时候，就会创建一个新的内存空间(<code>#f2</code>, <code>#f3</code>)，创建 <code>#f2</code> 的时候，函数体内部的 <code>this</code> 指向 <code>#f2</code>, 创建 <code>#f3</code> 的时候，函数体内部的 <code>this</code> 指向 <code>#f3</code>。</p><ul><li>(3) 执行函数体内的代码</li></ul><p>通过上面的讲解，你就可以知道，给 this 添加属性，就相当于给实例添加属性。</p><ul><li>(4) 默认返回 <code>this</code></li></ul><p>由于函数体内部的 <code>this</code> 指向新创建的内存空间，默认返回 <code>this</code> ，就相当于默认返回了该内存空间，也就是上图中的 <code>#f1</code>。此时，<code>#f1</code> 的内存空间被变量 <code>p1</code> 所接受。也就是说 <code>p1</code> 这个变量，保存的内存地址就是 <code>#f1</code>，同时被标记为 <code>Person</code> 的实例。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 代码简单实现 new 关键字</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> person </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 其实相当于做了如下处理</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> person </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Foo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Kevin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name) </span><span style="color:#676E95;font-style:italic;">// Kevin</span></span>
<span class="line"></span></code></pre></div><h2 id="prototype" tabindex="-1">prototype <a class="header-anchor" href="#prototype" aria-hidden="true">#</a></h2><p>每个函数都有一个 <code>prototype</code> 属性</p><p>每一个<code>JavaScript</code>对象( <code>null</code> 除外)在创建的时候就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型&quot;继承&quot;属性。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 虽然写在注释里，但是你要注意：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// prototype是函数才会有的属性</span></span>
<span class="line"><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Kevin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> person1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> person2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(person1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name) </span><span style="color:#676E95;font-style:italic;">// Kevin</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(person2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name) </span><span style="color:#676E95;font-style:italic;">// Kevin</span></span>
<span class="line"></span></code></pre></div><p><img src="`+p+`" alt="img loaded err"></p><h2 id="proto" tabindex="-1">proto <a class="header-anchor" href="#proto" aria-hidden="true">#</a></h2><p>每一个<code>JavaScript</code>对象(除了 <code>null</code> )都具有的一个属性，叫 <code>proto</code>，这个属性会指向该对象的原型</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> person </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre></div><p><img src="`+e+`" alt="image loaded error"></p><h2 id="constructor" tabindex="-1">constructor <a class="header-anchor" href="#constructor" aria-hidden="true">#</a></h2><p>每个原型都有一个 <code>constructor</code> 属性指向关联的构造函数 实例原型指向构造函数</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(Person </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">constructor)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre></div><p><img src="`+l+`" alt="image loaded error"></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> person </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype) </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">constructor </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> Person) </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 顺便学习一个ES5的方法,可以获得对象的原型</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getPrototypeOf</span><span style="color:#A6ACCD;">(person) </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype) </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre></div><h2 id="javascript原型链" tabindex="-1"><code>JavaScript</code>原型链 <a class="header-anchor" href="#javascript原型链" aria-hidden="true">#</a></h2><p><code>JavaScript</code> 里任何东西都是对象，任何一个对象内部都有另一个对象叫 <code>__proto__</code>，即原型，它可以包含任何东西让对象继承。当然 <code>__proto__</code> 本身也是一个对象，它自己也有自己的 <code>__proto__</code>，这样一级一级向上，就构成了一个<code>__proto__</code>链，即原型链。</p><p>当然原型链不会无限向上，它有个终点，可以称为原型链的顶端，或者 <code>root</code>，它是一个特殊的对象，它的 <code>__proto__</code> 为 <code>null</code>。</p><p>原型链的核心就是依赖对象的 <code>_proto_</code> 的指向，当自身不存在的属性时，就一层层的扒出创建对象的构造函数，直至到 <code>Object</code> 时，就没有 <code>_proto_</code> 指向了。</p><p>属性搜索原则：</p><ul><li>1.当访问一个对象的成员的时候，会现在自身找有没有,如果找到直接使用。</li><li>2.如果没有找到，则去原型链指向的对象的构造函数的 <code>prototype</code> 中找，找到直接使用，没找到就返回 <code>undifined</code> 或报错。</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__</span><span style="color:#89DDFF;">......</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre></div><p><img src="`+c+`" alt="image loaded error"></p><p><code>Object</code> 是 <code>JavaScript</code> 中内置的一个构造函数，<code>js</code> 中一般声明一个对象都是 <code>Object</code> 构造函数的对象。而且 <code>Object.prototype</code> 也就是原型链的顶端，<code>Object.prototype</code> 已经没有原型了，它的 <code>__proto__</code> 是<code>null</code>。</p><div class="tip custom-block"><p class="custom-block-title">注意</p><p>这就是 <code>JavaScript</code> 判断一个对象是否 <code>instanceof</code> 某个函数的依据，即对象a的原型链上有没有一个 <code>__proto__</code> 是这个函数的 <code>prototype</code>，如果有，那么 <code>a</code> 就是这个函数的 <code>instance</code>。由于一般所有的原型链最终都会指向顶端的 <code>Object.prototype</code>，所以它们都是 <code>Object</code> 的 <code>instance</code>。</p></div><p><code>JavaScript</code>里任何东西都是对象，包括函数，可以称为函数对象。所以 <code>foo</code> 也是对象，那 <code>foo</code> 的原型 <code>__proto__</code> 是什么？它是谁的 <code>instance</code>？<code>JavaScript</code> 里定义了一个特殊的函数叫 <code>Function</code>，可以称作是所有函数的爸爸，所有的函数都是它的实例，因此你可以认为，定义 <code>foo</code> 的时候发生了这样的事情：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">foo </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>于是我们有：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">foo </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>注意这里的 <code>Function.prototype</code>，这也是 <code>JavaScript</code> 里一个特殊的对象，<code>Chrome </code>的 <code>console</code> 里要是输入 <code>Function.prototype</code>，根本什么也打印不出来，什么 <code>native code</code>，就是说它是内部实现的。这个原型链还没到顶，<code>Function.prototype</code> 仍然有原型 <strong>proto</strong><code>，指向 </code>Object.prototype\`，所以我们最终有：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">foo </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>现在有个问题来了，那 <code>Function</code> 自己呢？它其实也是个函数，也是个对象，它的 <code>__proto__</code> 指向谁？答案是它自己的 <code>prototype</code>，即：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">Function</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">Function </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">Function</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">Function </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">总结一下</p><p>所有的函数都是 <code>Function</code> 的 <code>instance</code>，<code>Function</code> 自己也是它自己的 <code>instance</code>，不过后者严格来说并不准确，<code>Function</code>并不是它自己创造自己的，而应该看作 <code>JavaScript</code> 里原生的一个函数对象，只不过它的 <code>__proto__</code> 指向了它自己的 <code>prototype</code> 而已。</p></div><h2 id="function和object的关系" tabindex="-1">Function和Object的关系 <a class="header-anchor" href="#function和object的关系" aria-hidden="true">#</a></h2><p>这是 <code>JavaScript</code> 比较奇葩的一个地方，也是不太让人容易接受的一点。</p><p>我们知道一般任何对象都是 <code>Object</code> 的 <code>instance</code>，因为原型链的顶端都指向 <code>Object.prototype</code>。那么 <code>Object</code> 本身是什么？<code>Object</code> 也是个函数，而任何函数都是 <code>Function</code> 的实例对象，比如 <code>Array</code>，<code>String</code>，当然<code>Object</code> 也包括在内，它也是 <code>Function</code> 的实例，即：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">Object </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"></span></code></pre></div><p>同时，<code>Function</code> 是个对象，它的原型是 <code>Function.__proto__</code>，指向 <code>Function.prototype</code>，并且这个原型链向上继续指向 <code>Object.prototype</code>，即：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">Function</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">Function </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"></span></code></pre></div><p>这样就有了一个 <code>JavaScript </code>里经常说到的蛋鸡问题：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">Object </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">Function </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"></span></code></pre></div><p>到底谁先谁后，谁主谁次？关于这一点网上已经有很多解释，这里陈述一种观点，是先有 <code>Function</code>，它是主；后有 <code>Object</code>，是次。</p><p>以下是一种说法，可能并不准确，总结一下：</p><ul><li>首先没鸡没蛋，先有一个特殊对象 <code>root_prototype</code>，它是上帝。</li><li>接下来应该是先有 <code>Function</code>，并且定义它的 <code>prototype</code> 和 <code>__proto__</code>，都连上了 <code>root_prototype</code>。</li><li>然后才有了 <code>Object</code>，它是 <code>Function</code> 的 <code>instance</code>，继承了 <code>Function</code>。这时候 <code>Object</code> 仍然只是个普通的函数。</li><li>然后规定 <code>Object.prototype = root_prototype</code>，这时候 <code>Object</code> 才开始显得特殊，成为了原型链的顶端，否则它和其它函数根本没什么区别。</li><li>于是所有的东西，包括 <code>Function</code>，都成了 <code>Object</code> 的 <code>instance</code> 了。</li></ul><p>这里要强调 <code>Object</code> 和其它函数的不同之处。<code>Object</code> 之所以特殊，就是因为 <code>Object</code> 的 <code>prototype</code> 被设定为了 <code>root_prototype</code> ，仅此而已；</p><p>而其它函数例如 <code>foo</code>，它的 <code>prototype</code>只是一个普通的对象，这个对象的 <code>__proto__</code> 默认情况下指向 <code>root_prototype</code>。至于为什么这样设定，为什么 <code>Object</code>会特殊化，大概只是因为 <code>Object</code> 这个名字起得好，而 <code>foo</code>，<code>bar</code>没那么特殊。所以说白了 <code>Object</code> 函数只是一个盛放 <code>root_prototype</code> 的容器而已，从而使它晋升为一个特殊的函数。</p><p>另外值得注意的是，<code>obj instanceof function</code> 并不意味着 <code>obj</code> 就是这个 <code>function</code> 创建出来的，只不过是 <code>obj</code> 的原型链上有 <code>function.prototype</code> 而已。</p><p>所以所谓的 <code>Object instanceof Function</code> 和 <code>Function instanceof Object</code> 的蛋鸡问题，前者应该来说是自然而然、不容置疑的，可以认为 <code>Object</code> 函数是 <code>Function</code> 创造出来的；而后者说白了只是因为强行规定了 <code>Object</code>函数的特殊性，而导致的一个推论，而 <code>Function</code> 并非是 <code>Object</code> 创建的。</p><p>当然这些概念绕来绕去讨论其实我感觉没什么很大意义，无非只是自圆其说而已。</p><p><img src="`+t+'" alt="image loaded error"></p>',77),D=[y];function F(d,i,C,A,_,u){return o(),n("div",null,D)}const j=s(r,[["render",F]]);export{b as __pageData,j as default};
